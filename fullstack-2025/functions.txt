Functions
A function is a block of code that performs a specific task. Functions are the fundamental "building blocks" of a program, and they allow you to reuse the same code multiple times with different data, avoiding duplication.

Function Declaration
In JavaScript, there are several ways to create (synonyms: "declare", "define") a function. For instance, we can do so with a function keyword, similar to how let lets us declare variables. Here's an exemplary function that calculates the area of a rectangle and prints it to the console:

function calculateArea(length, width) {
  let area = length * width;

  console.log(area);
}

Let's break the code apart:

function is the keyword that declares the function
calculateArea is the name of the function, followed by parentheses ()
length and width are parameters of the function; they are variables that will receive values when the function is used
All commands inside curly braces {} are called the function body. Functions can have one parameter, multiple parameters, or no parameters at all.

Function Call
To execute the commands inside a function, we need to call the function itself. We do so by writing the function's name and succeeding it with arguments in parentheses, which are specific values for the function's parameters. Let's call the calculateArea function with arguments 5 and 7:

function calculateArea(length, width) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5, 7); // It will print 35 in the console

Here, 5 will be assigned to the length parameter, and 7 — to the width parameter. But sometimes, parameters might already have a predefined or default value. To demonstrate, let's calcualte the area of a fabric roll with a standard width of 1.5 meters:

function calculateArea(length, width = 1.5) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5); // the `width` value will be 1.5, so the result is 7.5

Default values are similar to the default settings on a phone set by the manufacturer. They are predefined, but you can always change them by passing new values as arguments when calling the function:

function calculateArea(length,  width = 1.5) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5); // The `width` is 1.5 because we didn't pass another value, so the result is 7.5
calculateArea(5, 7); // We provided new values for `width`, so the result is 35

Returning a Value From a Function
Most often, we don't want to just print the results of calculations to the console, but use them in the program for further actions. Such a function should return a value. In the function body, we use the return keyword, followed by an expression or value that we want to return:

function calculateArea(length, width) {
  let area = length * width;
  
  return area;
}

Previously, we called the function in a separate line, but to use the result of the function in the program, we call it directly — inside of an expression. For instance, to calculate the total area of 10 tables:

function calculateArea(length, width) {
  let area = length * width;
  
  return area;
}

let totalArea = 10 * calculateArea(5, 7);

If a function doesn't have the return keyword or if there's no value to the right of return, the result is undefined:

function calculateArea(length,  width) {
  let area = length * width;

  return;
}

let tableArea = calculateArea(5,7);

console.log(tableArea); // undefined

For simplicity, we can remove the area variable declaration and place the calculation expression after the return keyword:

function calculateArea(length, width) {
  return length * width;
}

Any commands following the return keyword won't be executed:

function calculateArea(length, width) {
  return length * width;

  console.log(area); // this command will not be executed
}

Function Naming
The name of a function should convey its purpose. It can consist of multiple words, but the first word should always be a verb that describes what the function does. Similar to variable names, the first word is written in lowercase, while all succeeding words are written in uppercase:

// good name
function sayHello(personName) { // explains the purpose of the function
  console.log(`Hello, ${personName}!`);
}

// bad names
function func(personName) { // it is not clear from the name what the function does
  console.log(`Hello, ${personName}!`);
}

function sayhello(personName) { // the second word is written with a lowercase letter
  console.log(`Hello, ${personName}!`);
}

Useful Keyboard Shortcuts
F2 to rename a variable
Shift + Alt + ↑ (on Windows) or Shift + Option + ↑ (on macOS) to duplicate the line up
Shift Alt + ↓ (on Windows) orShift + Option + ↓ (on macOS) to duplicate the line down







The else if Statement (Checking Multiple Conditions)
When we have more than two options to choose from, we can use the else if statement to check additional conditions. Let's consider an example:

if (age >= 18) {
  console.log('Hello!');
} else if (age > 7) {
  console.log('Hi!');
} else if (age > 3) {
  console.log('Hi, kid!');
} else {
  console.log('Hi, toddler!');
}

Note that it's sufficient to add else at the end, which will execute if none of the above conditions are met. Here's an example of using else if statements in a function:

function greet(age) {
  if (age >= 18) {
    console.log('Hello!');
  } else if (age > 7) {
    console.log('Hi!');
  } else if (age > 3) {
    console.log('Hi, kid!');
  } else {
    console.log('Hi, toddler!');
  }
}


greet(25); // the first condition is true, so `Hello!` appears in the console
greet(15); // the second condition is true (the first is false), so `Hi!` appears
greet(6);  // the third condition executes (first and second are false), so `Hi, kid!` appears
greet(2);  // all previous conditions are false, so the `else` block executes, resulting in `Hi, toddler!`




The return Keyword Inside if
So far, we've looked at examples where conditional statements in functions print messages to the console depending on conditions. However, it's more common for a function to return a value with the return keyword; a value to be used later in the program. Like here:

function getGreeting(age) {
  if (age >= 18) {
    return 'Hello!';
  } else if (age > 7) {
    return 'Hi!';
  } else if (age > 3) {
    return 'Hi, kid!';
  } else {
    return 'Hi, toddler!';
  }
}

let greeting = getGreeting(6);

console.log(greeting); // Hi, kid! will appear in the console

We can simplify this code with separate if statements for each option, instead of else if, because the function ends immediately after executing the line with the return keyword. Each if block executes only if all previous conditions were false:

function getGreeting(age) {
  if (age >= 18) {
    return 'Hello!';
  }

  if (age > 7) {
    return 'Hi!';
  }

  if (age > 3) {
    return 'Hi, kid!';
  }

  return 'Hi, toddler!';
}

let greeting = getGreeting(6);

console.log(greeting); // Hi, kid! will appear in the console

Let's examine how above code works. We've created the getGreeting function, which takes one argument, age, and uses several if statements. After calling getGreeting with the argument 6, the following actions occur:

In the first if, we check whether the age is greater than or equal to 18. If this condition is true, the function returns the string Hello! and terminates.
If the age is less than 18, we move to the next if, where we check whether the age is greater than 7. If the condition is true, we return Hi!.
If this condition also fails, we move to the third if, where we check whether the age is greater than 3. If the condition is true, we return Hi, kid!.
If none of these conditions are met, the last line executes, where the function returns Hi, toddler!.

Replacing an Element by Index
We can modify an array element through its index by simply assigning it a new value. For example:

let cities = ['Kyiv', 'London', 'Paris', 'Tokyo'];

cities[2] = 'New York';

console.log(cities); // the console will display ['Kyiv', 'London', 'New York', 'Tokyo']

Adding an Element at the End of the Array
To append a new element to the array's end, we can assign it to an index equal to the array's current length:

let cities = ['Kyiv', 'London', 'Paris', 'Tokyo'];

cities[cities.length] = 'New York';

console.log(cities); // the console will display ['Kyiv', 'London', 'Paris', 'Tokyo', 'New York']

Alternatively, we can use the push() method to add one or more new elements to the array's end. These elements will be placed after the last existing one:

Loops
In your programs, you'll often need to execute one command set more than once. Loops serve this exact purpose, and today we'll focus on a single loop type — the for loop. Here's an example of a loop that triggers console.log five times, a.k.a, a loop with five iterations:

for (let age = 1; age <= 5; age = age + 1) {
  console.log(`I am ${age}`);
}

Let's break the loop's building blocks:

The for keyword initiates the loop
Inside the parentheses (), there are three components:
The initial command let age = 1, executed only once before the loop starts
The condition age <= 5, checked before each loop iteration
The command age = age + 1, executed after each loop iteration
The command console.log(I am ${age}), placed inside the curly braces {}, forms the loop body and is executed on each iteration
...and how they come to work together:

The command let age = 1 is executed.
The condition age <= 5 is checked.
Since the condition is true (1 <= 5), the loop body is executed.
The text I am 1 is displayed in the console (since age = 1).
The command age = age + 1 is executed, and age becomes 2.
Steps second through fith are repeated as long as the condition is met. When age reaches 6, the condition becomes false, and the loop ends. In the console, we'll see:

I am 1
I am 2
I am 3
I am 4
I am 5

Shortcut Assignment
We can write the age = age + 1 command with the shortcut assignment operation age += 1. This lets us increase the value by any number, for example:

age += 1; // equivalent to age = age + 1;
age += 10; // equivalent to age = age + 10;

Shortcut assignment can also be used for other arithmetic operations:

age -= 5; // equivalent to age = age - 5;
age *= 5; // equivalent to age = age * 5;
age /= 5; // equivalent to age = age / 5;
age %= 5; // equivalent to age = age % 5;

Most often, the number in a loop is incremented or decremented by 1, and thus we can write these operations as:

age++; // equivalent to age += 1;
age--; // equivalent to age -= 1;

💡 The operation ++ is called an increment, and -- is a decrement.

Reverse Iteration
Sometimes, instead of increasing, we need to decrease the loop variable. Consider this example:

for (let i = 3; i > 0; i--) {
  console.log(i);
}

Here, we store 3 in the loop variable let i = 3, and we decrease its value by 1 with each iteration. In the console, we'll see:

3
2
1

Sum of Numbers
A loop can be used to sum numbers, like so:

function sumFromTo(min, max) {
  let sum = 0;

  for (let n = min; n <= max; n++) {
    sum += n; 
  }

  return sum;
}

console.log(
  sumFromTo(1, 5) // will output 15
);

Loop with Different Steps
In JavaScript, we can create loops with different steps. This means the loop variable can be increased or decreased by any specified value, not just 1. Below is an example where the loop step is passed as a third parameter when calling the function:

function sumFromTo(min, max, step) {
  let sum = 0;

  for (let n = min; n <= max; n += step) {
    sum += n; 
  }

  return sum;
}

console.log(
  sumFromTo(1, 5, 2) // will output 9
);

Factorial (Product of Numbers from 1 to N)
Factorial of a natural number N is the product of all natural numbers from 1 to N. We can calculate it with a for loop:

function factorial(N) {
  let result = 1; // start with 1

  for (let n = 1; n <= N; n++) {
    result *= n; // multiply the product of previous numbers by the current number n
  }

  return result; // return the calculated factorial
}

const result = factorial(5);

console.log(result); // will output 120

💡 Natural numbers are the numbers that appear when counting objects or their order. These are numbers like 1, 2, 3, 4, … The set of natural numbers is commonly denoted by N.

Iterating Over String Characters
In this lesson, we'll learn how to iterate through a string and create a new string based on an existing one.

Iteration with Index
To iterate over the characters in a string, we can use a for loop and iterate over indices from 0 to the last one. Usually, the loop variable is named i, short for index. For example:

const title = 'String';

for (let i = 0; i < title.length; i++) {
  console.log(title[i]);
}

The console will output:

S
t
r
i
n
g

If we don't need all characters, we can both start the iteration from a later and conclude the iteration prematurely. For instance:

const title = 'String';

for (let i = 2; i < 5; i++) {
  console.log(title[i]);
}

The console will output:

r
i
n

Reverse Order Iteration
To iterate over the characters in reverse order, start from the last index and decrease it in the loop:

const title = 'String';

for (let i = title.length - 1; i >= 0; i--) {
  console.log(title[i]);
}

The console will output:

g
n
i
r
t
S

Iterating without an Index
We can also iterate over the characters of a string using a for of loop, which doesn't require indices:

const title = 'String';

for (let char of title) {
  console.log(char);
}

Counting Characters
Using a loop, we can count the number of specific characters in a string, such as spaces:

const text = 'Working with Strings';
let spacesCount = 0;

for (let char of text) {
  // counting the number of spaces in the string
  if (char === ' ') {
    spacesCount++;
  }
}

console.log(spacesCount); // 2

Removing Characters from a String
We can't modify an existing string, but we can create a new string and fill it with the desired characters. Here's a loop that copies all characters to a new string except spaces:

const text = 'Working with Strings';
let result = ''; 

for (let char of text) {
  if (char !== ' ') {
    // adding everything except spaces
    result += char;
  }
}

console.log(result); // 'WorkingwithStrings'

Creating a Reversed String
To create a string with letters in reverse order, we can iterate through the input string by indices from the end:

const name = 'String';
let reversed = '';

for (let i = name.length - 1; i >= 0; i--) {
  reversed += name[i];
}

console.log(reversed); // 'gnirtS'

Alternatively, we can iterate through the letters in normal order but add them to the beginning instead of the end:

const name = 'String';
let reversed = '';

for (let char of name) {
  // adding each character before those already added
  reversed = char + reversed;
}

console.log(reversed); // 'gnirtS'

Replacing Characters Using a Loop
Sometimes while working with strings, we may need to replace spaces with other characters, like hyphens. This can be useful when creating URL slugs. A for loop will be perfect for this purpose:

let title = 'Working with Strings';
let result = '';

for (let i = 0; i < title.length; i++) {
  if (title[i] === ' ') {
    result += '-';
  } else {
    result += title[i];
  }
}

console.log(result); // 'Working-with-Strings'

The same task can be accomplished with a for of loop:

String Methods
In this lesson, we'll dive into methods that make handling strings easier and more efficient.

Text Case
The methods toUpperCase() and toLowerCase() convert all characters of a string to upper and lower case, respectively, and return the modified string. Here's how they work:

let title = 'Working with Strings';

console.log(
  title.toLowerCase(), // outputs 'working with strings'
  title.toUpperCase() // outputs 'WORKING WITH STRINGS'
  title, // 'Working with Strings'
);

Importantly, these methods are applicable to letters only. To check, if a character is a letter, use below feature:

function isLetter(ch) {
  return ch.toLowerCase() !== ch.toUpperCase();
}

console.log(
  isLetter('a'), // true
  isLetter('B'), // true
  isLetter('1'), // false
  isLetter(','), // false
  isLetter(' '), // false
);

Replacing All Occurrences
The replaceAll method replaces every instance of a specified substring in a string with another given substring. It takes two arguments, first — the substring to find, second — the replacement string. Here's an example:

let title = 'Working with Strings';

console.log(
  title.replaceAll(' ', '-'), // 'working-with-strings'
  title.replaceAll('with', '**'), // 'working–**-strings'
);

replaceAll() is case-sensitive, so it only replaces instances that exactly match the case of the search string.

Substring Search
The includes() method checks if a string contains a certain character or substring. We specify what we're looking for in the method's parameters, like so:

let title = 'Working with Strings';

console.log(
  title.includes(' '), // true
  title.includes('with'), // true
  title.includes('With'), // false
);

includes() is also case-sensitive, meaning it treats uppercase and lowercase letters as distinct.

Searching for an Index
To find the first appearance of a character or substring within a string, you can use the indexOf() method. If the character or substring is present, indexOf() returns the index of its first occurrence. If not, it returns -1.

let title = 'Working with Strings';

console.log(
  title.indexOf(' '), // 7
  title.indexOf('with'), // 8
  title.indexOf('Strings'), // 13
);
