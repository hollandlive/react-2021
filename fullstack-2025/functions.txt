Functions
A function is a block of code that performs a specific task. Functions are the fundamental "building blocks" of a program, and they allow you to reuse the same code multiple times with different data, avoiding duplication.

Function Declaration
In JavaScript, there are several ways to create (synonyms: "declare", "define") a function. For instance, we can do so with a function keyword, similar to how let lets us declare variables. Here's an exemplary function that calculates the area of a rectangle and prints it to the console:

function calculateArea(length, width) {
  let area = length * width;

  console.log(area);
}

Let's break the code apart:

function is the keyword that declares the function
calculateArea is the name of the function, followed by parentheses ()
length and width are parameters of the function; they are variables that will receive values when the function is used
All commands inside curly braces {} are called the function body. Functions can have one parameter, multiple parameters, or no parameters at all.

Function Call
To execute the commands inside a function, we need to call the function itself. We do so by writing the function's name and succeeding it with arguments in parentheses, which are specific values for the function's parameters. Let's call the calculateArea function with arguments 5 and 7:

function calculateArea(length, width) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5, 7); // It will print 35 in the console

Here, 5 will be assigned to the length parameter, and 7 — to the width parameter. But sometimes, parameters might already have a predefined or default value. To demonstrate, let's calcualte the area of a fabric roll with a standard width of 1.5 meters:

function calculateArea(length, width = 1.5) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5); // the `width` value will be 1.5, so the result is 7.5

Default values are similar to the default settings on a phone set by the manufacturer. They are predefined, but you can always change them by passing new values as arguments when calling the function:

function calculateArea(length,  width = 1.5) {
  let area = length * width;
  
  console.log(area);
}

calculateArea(5); // The `width` is 1.5 because we didn't pass another value, so the result is 7.5
calculateArea(5, 7); // We provided new values for `width`, so the result is 35

Returning a Value From a Function
Most often, we don't want to just print the results of calculations to the console, but use them in the program for further actions. Such a function should return a value. In the function body, we use the return keyword, followed by an expression or value that we want to return:

function calculateArea(length, width) {
  let area = length * width;
  
  return area;
}

Previously, we called the function in a separate line, but to use the result of the function in the program, we call it directly — inside of an expression. For instance, to calculate the total area of 10 tables:

function calculateArea(length, width) {
  let area = length * width;
  
  return area;
}

let totalArea = 10 * calculateArea(5, 7);

If a function doesn't have the return keyword or if there's no value to the right of return, the result is undefined:

function calculateArea(length,  width) {
  let area = length * width;

  return;
}

let tableArea = calculateArea(5,7);

console.log(tableArea); // undefined

For simplicity, we can remove the area variable declaration and place the calculation expression after the return keyword:

function calculateArea(length, width) {
  return length * width;
}

Any commands following the return keyword won't be executed:

function calculateArea(length, width) {
  return length * width;

  console.log(area); // this command will not be executed
}

Function Naming
The name of a function should convey its purpose. It can consist of multiple words, but the first word should always be a verb that describes what the function does. Similar to variable names, the first word is written in lowercase, while all succeeding words are written in uppercase:

// good name
function sayHello(personName) { // explains the purpose of the function
  console.log(`Hello, ${personName}!`);
}

// bad names
function func(personName) { // it is not clear from the name what the function does
  console.log(`Hello, ${personName}!`);
}

function sayhello(personName) { // the second word is written with a lowercase letter
  console.log(`Hello, ${personName}!`);
}

Useful Keyboard Shortcuts
F2 to rename a variable
Shift + Alt + ↑ (on Windows) or Shift + Option + ↑ (on macOS) to duplicate the line up
Shift Alt + ↓ (on Windows) orShift + Option + ↓ (on macOS) to duplicate the line down







The else if Statement (Checking Multiple Conditions)
When we have more than two options to choose from, we can use the else if statement to check additional conditions. Let's consider an example:

if (age >= 18) {
  console.log('Hello!');
} else if (age > 7) {
  console.log('Hi!');
} else if (age > 3) {
  console.log('Hi, kid!');
} else {
  console.log('Hi, toddler!');
}

Note that it's sufficient to add else at the end, which will execute if none of the above conditions are met. Here's an example of using else if statements in a function:

function greet(age) {
  if (age >= 18) {
    console.log('Hello!');
  } else if (age > 7) {
    console.log('Hi!');
  } else if (age > 3) {
    console.log('Hi, kid!');
  } else {
    console.log('Hi, toddler!');
  }
}


greet(25); // the first condition is true, so `Hello!` appears in the console
greet(15); // the second condition is true (the first is false), so `Hi!` appears
greet(6);  // the third condition executes (first and second are false), so `Hi, kid!` appears
greet(2);  // all previous conditions are false, so the `else` block executes, resulting in `Hi, toddler!`




The return Keyword Inside if
So far, we've looked at examples where conditional statements in functions print messages to the console depending on conditions. However, it's more common for a function to return a value with the return keyword; a value to be used later in the program. Like here:

function getGreeting(age) {
  if (age >= 18) {
    return 'Hello!';
  } else if (age > 7) {
    return 'Hi!';
  } else if (age > 3) {
    return 'Hi, kid!';
  } else {
    return 'Hi, toddler!';
  }
}

let greeting = getGreeting(6);

console.log(greeting); // Hi, kid! will appear in the console

We can simplify this code with separate if statements for each option, instead of else if, because the function ends immediately after executing the line with the return keyword. Each if block executes only if all previous conditions were false:

function getGreeting(age) {
  if (age >= 18) {
    return 'Hello!';
  }

  if (age > 7) {
    return 'Hi!';
  }

  if (age > 3) {
    return 'Hi, kid!';
  }

  return 'Hi, toddler!';
}

let greeting = getGreeting(6);

console.log(greeting); // Hi, kid! will appear in the console

Let's examine how above code works. We've created the getGreeting function, which takes one argument, age, and uses several if statements. After calling getGreeting with the argument 6, the following actions occur:

In the first if, we check whether the age is greater than or equal to 18. If this condition is true, the function returns the string Hello! and terminates.
If the age is less than 18, we move to the next if, where we check whether the age is greater than 7. If the condition is true, we return Hi!.
If this condition also fails, we move to the third if, where we check whether the age is greater than 3. If the condition is true, we return Hi, kid!.
If none of these conditions are met, the last line executes, where the function returns Hi, toddler!.

Replacing an Element by Index
We can modify an array element through its index by simply assigning it a new value. For example:

let cities = ['Kyiv', 'London', 'Paris', 'Tokyo'];

cities[2] = 'New York';

console.log(cities); // the console will display ['Kyiv', 'London', 'New York', 'Tokyo']

Adding an Element at the End of the Array
To append a new element to the array's end, we can assign it to an index equal to the array's current length:

let cities = ['Kyiv', 'London', 'Paris', 'Tokyo'];

cities[cities.length] = 'New York';

console.log(cities); // the console will display ['Kyiv', 'London', 'Paris', 'Tokyo', 'New York']

Alternatively, we can use the push() method to add one or more new elements to the array's end. These elements will be placed after the last existing one:

