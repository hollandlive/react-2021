Writing Guidelines
Our code should always be understandable.
Our code should be shortened only if we can keep it uncomplicated.
When commenting our code, comments should explain why a decision was made, not how it works (which should be clear from the code itself).
We should always remove redundant code (don't leave code that's commented out).
Commands
We will write each command on a new line, so that its boundaries are easier to find.
To avoid ambiguity in the code, we will end each command with a semicolon ;.
We should strive for line lengths that don't exceed 80 characters for comfortable readability.
Code Blocks
Always enclose the bodies of loops, functions, and if blocks in curly braces { }:

// good
if (condition) {
  result += 123;
}

for (let i = 0 ; i < text.length; i++) {
  result = text[i] + result;
}

// bad
if (condition) result += 123;;

for (let i = 0 ; i < text.length; i++)
  result = text[i] + result;

Place the opening bracket { on the same line as the start of the block.
Place the closing bracket } on the line following the last command of the block.
// good
if (condition) {
  result = 123;
} else {
  result = 456;
}

function sum(a, b) {
  return a + b;
}

// bad
if (condition) { result = 123; }
else { result = 456; }

function sum(a, b)
{
  return a + b;
}

Indentation
Nested code should be indented with two spaces more than the outer code:

// good
if (condition) {
  console.log(456)
  console.log(123)
}

// bad
if (condition) {
    console.log(456)
console.log(123)
}

We should separate logical blocks at the same nesting level with an empty line. This includes functions, loops, if blocks, return statements, variable blocks, and groups of related commands:

// good
function test() {
  let x = 10;

  while (x > 5) {
    x--;
    console.log(x);
  }

  return x;
}

// bad
function test() {

  let x = 10;
  while (x > 5) {
  
    x--;

    console.log(x);

  }
  return x;

}

Variables
We will be declaring variables using let or const, but not var, which is an outdated method. Each variable should be declared separately.

// good
let x = 1;
let y = 2;

// bad
let x = 1, y = 2;

We should write variable and function names in camelCase for variable and function names. Avoid using underscores _, and make sure all words after the first start with a capital letter:

// good
let userName = '';

// bad 
let user_name = '';
let UserName = ''; // can be used in some situations

Single-letter variables are permissible only where their meaning is clear e.g.:

As an index in a loop;
For mathematical variables (x, y, a, b, c);
If it significantly shortens and simplifies the code, making it more understandable.
Variable names should be written in plain English and be descriptive. This means it should be clear from the name what the variable is storing. For boolean values, use verbs in the third form, passive voice, or modal verbs (isLoaded, loaded, hasEnoughMoney, canBuy). For arrays, use nouns in the plural. Do not use prefixes like arr, obj, etc. â€” the name should be clear without them. Function names should start with a verb and describe what they do.

ðŸ’¡ Event handlers are the exception to these rules, as they have specific names like onClick or submitHandler â€“ but we will discuss them later.

What NOT To Do: Examples of Poor Coding Style
DON'T use abstract variable and function names (obj, data, value, item, elem, etc.) if you can help it.
DON'T use similar variable names (num1 and num2), as they can easily lead to typos.
DON'T reuse variables and parameters for new values, making it unclear what they currently store.
DON'T create a function that's doing something more or something else than its name would suggest (causing a side effect).
Conditional (Ternary) Operator
Sometimes it's necessary to assign different values to a variable based on a condition. This can be done using if and else:

let age = 23;
let result = '';

// condition
if (age >= 18) {
  // value1
  result = 'Adult';
} else {
  // value2
  result = 'Not Adult';
}

console.log(result); // 'Adult'

However, this may be problematic when our programs gets larger. The construct can become fairly large, and it prevents us from using use const for the result variable, as we need to assign a new value inside the if - else block.

A shorter and more convenient option is the conditional (ternary) operator. Let's look at an example:

let age = 23;
const result = age >= 18 ? 'Adult' : 'Not Adult';

console.log(result); // 'Adult'

If the condition age >= 18 is met (as in our example), then the value 'Adult' following the ? is returned. Otherwise, the statements returns 'Not Adult'.

For clarity, we can enclose the expression's condition in parentheses:

const result = (age >= 18) ? 'Adult' : 'Not Adult';

If the expression is lengthy, we can break the values into multiple lines:

const result = (age >= 18)
  ? 'Adult'
  : 'Not Adult';

This operator is often called ternary, as it's the only operator that uses three parts.

JSDoc
Starting from this lesson, to improve auto-complete features of our IDE, we will be adding comments in the JSDoc format to each function:

/**
 * @param {number} a
 * @param {number} b
 *
 * @returns {string}
 */
function getSumText(a, b) {
  return `${a} + ${b} = ${a + b}`;
}

The @param {type} name comment tells the editor that the parameter named name should be of the type specified in curly brackets {}. This can be number, string, boolean, null, undefined for primitive values, or number[] for an array of numbers, string[] for an array of strings, etc.

You can also specify two or more types using the pipe character |, indicating that the parameter can be one of those types. For example:

/**
 * @param {number|string} id
 */
function check(id) {}

Similarly, the type after @returns {type} suggests the type of value that the function should return.

Working with Numbers
As software developers, we often need to perform operations on numbers: round them, convert user inputs into numbers, generate random numbers, and so on. In this lesson, we'll practice executing these routine tasks.

Numeric Literals
In JavaScript, numbers can be either integers or decimals, and can be represented in various number systems or formats. Here's how you can represent the decimal number 123 in different systems:

let dec = 123; // typical decimal (Base-10) system, requires no prefix
let bin = 0b1111011; // `0b` is the prefix for binary (Base-2). The actual number value is '1111011`
let oct = 0o173; // `0o` is the prefix for octal (Base-8). The actual number value is `173`
let hex = 0x7b; // `0x` is the prefix for hexadecimal (Base-16). The actual number value is `7b`

We will be mostly working with decimal numbers in our projects. They can also be expressed in several ways:

let x = 15 // An integer decimal number
let y = 0.52 // A decimal number with a fractional part
let z = 3.14e6 // `e6` means multiply by `10` to the `6th` power, so the number is `3140000` 

Binary and Hexadecimal Numbers
Our familiar decimal system is positional, so each digit is multiplied by 10 to the corresponding power (position from the right, starting from 0). Consider the number 345:

345 === 3 * (10 ** 2) + 4 * (10 ** 1) + 5 * (10 ** 0)
345 === (3 * 100) + (4 * 10) + (5 * 1)

In the binary system, there are only digits 0 and 1, which need to be multiplied by 2 to the corresponding power:

0b101101 === 1 * (2 ** 5) + 0 * (2 ** 4) + 1 * (2 ** 3) + 1 * (2 ** 2) + 0 * (2 ** 1) + 1 * (2 ** 0)
0b101101 === (1 * 32) + (0 * 16) + (1 * 8) + (1 * 4) + (0 * 2) + (1 * 1)
0b101101 === 32 + 8 + 4 + 1 === 45

In the hexadecimal system, digits from 0 to 9 and letters A to F are used, where A = 10, B = 11, C = 12, D = 13, E = 14, and F = 15:

0x9F2C = 9 * (16 ** 3) + 15 * (16 ** 2) + 2 * (16 ** 1) + 12 * (16 ** 0)
0x9F2C = (9 * 4096) + (15 * 256) + (2 * 16) + (12 * 1)
0x9F2C = 36864 + 3840 + 32 + 12 === 40748

Infinity and NaN
JavaScript has two special numeric values:

Infinity is the mathematical infinity. It appears when dividing by 0 and is larger than any other number. There is also the opposite value -Infinity, which is smaller than any other number. The function isFinite() converts its argument to a number and returns true if it's a regular number, not NaN or Infinity.

NaN (Not a Number) is a special numerical value that's returned if the program is trying to calculate something that logically cannot be calculated. It may pop up, for example, when we divide 0 by 0, or divide a number by a string that can't be converted to a number (346 / 'apple'). The NaN value is unique in that it doesn't equal anything else â€“ not even itself:

console.log(NaN === NaN); // false

There's also a function isNaN, which converts its argument to a number and determines whether it is NaN (not a number) or not:

isNaN(NaN); // true
isNaN(45.2); // false
isNaN(Infinity); // false
isNaN('123'); // false
isNaN('0x123'); // false
isNaN('12 hello'); // true

Rounding Values
Very often, calculations result in fractional numbers, not integers. We can round these up or down. To do so, we use the following commands:

Math.round(x) â€” rounds x to the nearest integer (up or down):
console.log(
  Math.round(10.1), // 10
  Math.round(10.5), // 11
  Math.round(10.8), // 11
  Math.round(-10.1), // -10
  Math.round(-10.5), // -10
  Math.round(-10.8), // -11
);

Math.floor(x) â€” rounds x down (to the nearest smaller integer):
console.log(
  Math.floor(10.1), // 10
  Math.floor(10.5), // 10
  Math.floor(10.8), // 10
  Math.floor(-10.1), // -11
  Math.floor(-10.5), // -11
  Math.floor(-10.8), // -11
);

Math.ceil(x â€” rounds x up (to the nearest larger integer):
console.log(
  Math.ceil(10.1), // 11
  Math.ceil(10.5), // 11
  Math.ceil(10.8), // 11
  Math.ceil(-10.1), // -10
  Math.ceil(-10.5), // -10
  Math.ceil(-10.8), // -10
);

Math.trunc(x) â€” removes the fractional part:
console.log(
  Math.trunc(10.1), // 10
  Math.trunc(10.5), // 10
  Math.trunc(10.8), // 10
  Math.trunc(-10.1), // -10
  Math.trunc(-10.5), // -10
  Math.trunc(-10.8), // -10
);

x.toFixed(numberOfDigits) â€“ converts a number to a string with a specified number of digits after the decimal point:
console.log(
  (3.14159).toFixed(0), // '3'
  (3.14159).toFixed(2), // '3.14'
  (3.14159).toFixed(3), // '3.142'
  (3.14159).toFixed(4), // '3.1416'
  (3.14).toFixed(4), // '3.1400'
  (3).toFixed(4), // '3.0000'
  (-3.14159).toFixed(4), // '-3.1416'
);

Generating Random Numbers
The Math.random method returns a random number from 0 (inclusive) to 1 (exclusive):

console.log(
  Math.random(), // 0.6460395007021751
  Math.random(), // 0.511311069945108
  Math.random(), // 0.36258333704200685
);

To generate random integer numbers from 0 to n, we can multiply the result by n + 1 and round down (to the smaller integer):

Math.floor(Math.random() * 11); // Random integer from 0 to 10 inclusive

For random integers, ranging from min to max inclusive, we can generate a number from 0 to max - min, and then add min:

Math.floor(Math.random() * (max - min + 1)) + min;
Math.floor(Math.random() * (11 - 7 + 1)) + 7; // Random integer from 7 to 11 inclusive
Math.floor(Math.random() * (20 - 10 + 1)) + 10; // Random integer from 10 to 20 inclusive

Converting a String to a Number
The standard Number function works similarly to the + operator for converting strings to numbers:

console.log(
  Number(text), // 3.14159
  Number('27.5'), // 27.5
  Number('2.4e3'), // 2400 - Exponential format
  Number('0xABC'), // 2748 - Hexadecimal number
  Number('0b1001'), // 9 - Binary number
);

We can also convert other value types into numbers:

console.log(+true); // 1
console.log(+false); // 0
console.log(+null); // 0 
console.log(+undefined); // NaN 

If a full conversion of the string to a number isn't possible, the result of the conversion will be NaN:

const text = 'Hello';

console.log(
  +text, // NaN - text isn't a number
  +'35$', // NaN - $ isn't a valid number symbol
  +'2.4.3', // NaN - a second decimal point isn't allowed
  +'0xABCZ', // NaN - Z isn't a valid symbol in hexadecimal
  +'0b10012', // NaN - 2 isn't a valid symbol in binary
);

For partial conversion of a numeric string, we can use the standard functions parseInt and parseFloat.

parseInt takes two parameters: the value to convert and the number system (optional), and returns an integer or NaN if the string doesn't start with a number:

parseInt('256$'); // 256 - stops at the first character that isn't part of an integer
parseInt('123.456'); // 123 - the fractional part is discarded
parseInt('256', 2); // NaN - because such digits don't exist in binary
parseInt('1A'); // 1 - the letter `A` is ignored
parseInt('1A', 16); // 26 â€” hexadecimal number
parseInt('abc'); // NaN - the string doesn't start with a number in decimal

parseFloat takes a value to convert and returns a number or NaN if conversion is impossible, for example:

parseFloat('3.14'); // 3.14
parseFloat('2.718 is the base of natural logarithm'); // 2.718
parseFloat('abc'); // NaN, because the string doesn't start with a number

This wraps up our overview of working with numbers in JavaScript. With these tools and techniques, you'll be well-equipped to handle various numerical operations, which are commonly required in programming.